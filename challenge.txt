1. Max of Two Numbers
Challenge: Write a function max_of_two(a, b) that returns the maximum of two numbers.
Explanation: This is a basic problem where you need to compare two numbers and return the larger one. It introduces the concept of conditional statements in Python.


2. Length of a String
Challenge: Write a function string_length(s) that returns the length of a given string.
Explanation: This problem involves finding the length of a string using Python's built-in len() function. It’s a simple exercise to understand how to work with strings.


3. Check if a Letter is a Vowel
Challenge: Write a function is_vowel(c) that checks if a given character is a vowel.
Explanation: This challenge requires you to check if a character is one of the vowels (a, e, i, o, u). It demonstrates the use of conditionals and string operations.


4. Generate Character String
Challenge: Define a function generate_n_chars(n, c) that returns a string of length n consisting only of the character c.
Explanation: This problem helps you understand loops and string manipulation in Python. You’ll create a string by repeating a character n times.


5. Max of Three Numbers
Challenge: Write a function max_of_three(a, b, c) that returns the maximum of three numbers.
Explanation: This challenge extends the concept of finding the maximum to three numbers. It’s an introduction to more complex conditional logic.


6. Sum and Multiplication of Numbers in a List
Challenge: Write a function sum_and_multiplication(lst) that returns the sum and multiplication of all the numbers in a list.
Explanation: This problem involves iterating through a list to calculate both the sum and the product of its elements. It demonstrates the use of loops and basic arithmetic operations.


7. Check if a List is Sorted
Challenge: Write a function is_sorted(lst) that checks if a list is sorted in either ascending or descending order.
Explanation: This challenge requires you to check the order of elements in a list. It involves iterating through the list and comparing adjacent elements to determine if the list is sorted.


8. Reverse a String
Challenge: Define a function reverse(x) that computes the reversal of a string.
Explanation: This problem involves reversing a string. It demonstrates the use of slicing in Python, which is a powerful feature for string manipulation.


9. Palindrome
Challenge: Define a function is_palindrome(x) that recognizes palindromes.
Explanation: This challenge requires you to check if a word reads the same backward as forward. It combines string manipulation and comparison.


10. Words Longer than N in a List
Challenge: Write a function filter_long_words(words, n) that returns the list of words longer than n.
Explanation: This problem involves filtering word lists based on length. It demonstrates list comprehension, a concise way to create lists in Python.


11. Count Vowels in a String
Challenge: Write a function count_vowels(s) that counts the number of vowels in a given string.
Explanation: This challenge requires counting the number of vowels in a string. It involves iterating through the string and checking each character.


12. Convert Binary to Decimal
Challenge: Write a function binary_to_decimal(binary) that converts a binary number (given as an integer) to its decimal equivalent.
Explanation: This problem involves converting a binary number to its decimal form. It demonstrates the use of loops and mathematical operations.


13. Maximum in a List
Challenge: Write a function max_in_list(lst) that returns the largest number in a list.
Explanation: This challenge requires finding the maximum number in a list. It’s an extension of the max function to handle lists of any size.


14. Longest Word in a List
Challenge: Write a function find_longest_word(words) that returns the length of the longest word in a list of words.
Explanation: This problem involves finding the longest word in a list. It requires iterating through the list and comparing the lengths of each word.


15. Fibonacci Sequence
Challenge: Write a function fibonacci(n) that returns the first n numbers in the Fibonacci sequence.
Explanation: This challenge requires generating a sequence where each number is the sum of the two preceding ones. It’s a classic problem that demonstrates recursion or iterative approaches.

